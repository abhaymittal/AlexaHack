'use strict';

const https = require('https');

var AWS=require("aws-sdk");

AWS.config.update({
  region: "us-east-1",
  endpoint: "dynamodb.us-east-1.amazonaws.com"
});

var table="AllergeniusPersonTable";

/**
 * This sample demonstrates a simple skill built with the Amazon Alexa Skills Kit.
 * The Intent Schema, Custom Slots, and Sample Utterances for this skill, as well as
 * testing instructions are located at http://amzn.to/1LzFrj6
 *
 * For additional samples, visit the Alexa Skills Kit Getting Started guide at
 * http://amzn.to/1LGWsLG
 */


// --------------- Helpers that build all of the responses -----------------------

function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: 'PlainText',
            text: output,
        },
        card: {
            type: 'Simple',
            title: `SessionSpeechlet - ${title}`,
            content: `SessionSpeechlet - ${output}`,
        },
        reprompt: {
            outputSpeech: {
                type: 'PlainText',
                text: repromptText,
            },
        },
        shouldEndSession,
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: '1.0',
        sessionAttributes,
        response: speechletResponse,
    };
}


// --------------- Functions that control the skill's behavior -----------------------

function getWelcomeResponse(callback) {
    // // If we wanted to initialize the session to have some attributes we could add those here.
    // const sessionAttributes = {};
    // const cardTitle = 'Welcome';
    // const speechOutput = 'Welcome!';// Welcome to the Dark Lord\'s colorful lair in the great lands of Mordor! ' +
    //     //'Please tell me your favorite color by saying, my favorite color is red';
    // // If the user either does not reply to the welcome message or says something that is not
    // // understood, they will be prompted again with this text.
    // const repromptText = 'Please tell me your favorite color by saying, ' +
    //     'my favorite color is red';
    // const shouldEndSession = false;

    // callback(sessionAttributes,
    //     buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
    
    const cardTitle = "Allergy Check";
    let repromptText = '';
    let sessionAttributes = {};
    const shouldEndSession = false;
    let speechOutput = '';
    
    speechOutput = "Hi! What are you making today?";
    repromptText = "What are you making today?";

    callback(sessionAttributes,
         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function handleSessionEndRequest(callback) {
    const cardTitle = 'Session Ended';
    const speechOutput = 'Thank you for trying the Alexa Skills Kit sample. Have a nice day!';
    // Setting this to true ends the session and exits the skill.
    const shouldEndSession = true;

    callback({}, buildSpeechletResponse(cardTitle, speechOutput, null, shouldEndSession));
}

function createFavoriteColorAttributes(favoriteColor) {
    return {
        favoriteColor,
    };
}

function createPersonNameAttribute(personName) {
    return {
        personName,
    };
}

// function createRecipeAttribute(recipe) {
//     return {
//         recipe,
//     };
// }

// function createGroupNameAttribute(groupName) {
//     return {
//         groupName,
//     };
// }

/**
 * Sets the color in the session and prepares the speech to reply to the user.
 */
function setColorInSession(intent, session, callback) {
    const cardTitle = intent.name;
    const favoriteColorSlot = intent.slots.Color;
    let repromptText = '';
    let sessionAttributes = {};
    const shouldEndSession = false;
    let speechOutput = '';

    if (favoriteColorSlot) {
        const favoriteColor = favoriteColorSlot.value;
        sessionAttributes = createFavoriteColorAttributes(favoriteColor);
        speechOutput = `I now know your favorite color is ${favoriteColor}. You can ask me ` +
            "your favorite color by saying, what's my favorite color?";
        repromptText = "You can ask me your favorite color by saying, what's my favorite color?";
    } else {
        speechOutput = "I'm not sure what your favorite color is. Please try again.";
        repromptText = "I'm not sure what your favorite color is. You can tell me your " +
            'favorite color by saying, my favorite color is red';
    }

    callback(sessionAttributes,
         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function getColorFromSession(intent, session, callback) {
    let favoriteColor;
    const repromptText = null;
    const sessionAttributes = {};
    let shouldEndSession = false;
    let speechOutput = '';

    if (session.attributes) {
        favoriteColor = session.attributes.favoriteColor;
    }

    if (favoriteColor) {
        speechOutput = `Your favorite color is ${favoriteColor}. Goodbye.`;
        shouldEndSession = true;
    } else {
        speechOutput = "I'm not sure what your favorite color is, you can say, my favorite color " +
            ' is red';
    }

    // Setting repromptText to null signifies that we do not want to reprompt the user.
    // If the user does not respond or says something that is not understood, the session
    // will end.
    callback(sessionAttributes,
         buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));
}

function addPersonName(intent, session, callback) {
    const cardTitle = intent.name;
    const personNameSlot = intent.slots.PersonName;
    let repromptText = '';
    let sessionAttributes = {};
    const shouldEndSession = false;
    let speechOutput = '';
    
    if (personNameSlot) {
        const personName = personNameSlot.value;
        sessionAttributes = createPersonNameAttribute(personName);
        speechOutput = `New person with name ${personName} added. You can ask me, ` +
            "who is this new person?";
        repromptText = "You can ask me, who is this new person?";
    } else {
        speechOutput = "I'm not sure what this name is. Please try again.";
        repromptText = "I'm not sure what this name is. You can tell me " +
            'the new name by saying, add new person with name Jack';
    }

    callback(sessionAttributes,
         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function getPersonName(intent, session, callback) {
    let personName;
    const repromptText = null;
    const sessionAttributes = {};
    let shouldEndSession = false;
    let speechOutput = '';

    if (session.attributes) {
        personName = session.attributes.personName;
    }

    if (personName) {
        speechOutput = `The new person's name is ${personName}. Enjoy your dinner.`;
        shouldEndSession = true;
    } else {
        speechOutput = "I'm not sure what the name is, you can say, " +
            'add new person with name Jack';
    }

    // Setting repromptText to null signifies that we do not want to reprompt the user.
    // If the user does not respond or says something that is not understood, the session
    // will end.
    callback(sessionAttributes,
         buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));
}

function invokeAllergyCheck(intent, session, callback) {
    const cardTitle = intent.name;
    let repromptText = '';
    let sessionAttributes = {};
    const shouldEndSession = false;
    let speechOutput = '';
    
    speechOutput = "Hi! What are you making today?";
    repromptText = "What are you making today?";

    callback(sessionAttributes,
         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function setRecipe(intent, session, callback) {
    const cardTitle = intent.name;
    const recipeSlot = intent.slots.Recipe;
    let repromptText = '';
    let sessionAttributes = {};
    const shouldEndSession = false;
    let speechOutput = '';
    
    if (recipeSlot) {
        const recipe = recipeSlot.value;
        session.attributes.recipe = recipe;
        speechOutput = `${recipe}. Sounds delicious! Who's invited?`;
        repromptText = "Who's invited?";
    } else {
        speechOutput = "I didn't catch that. Please try again.";
        repromptText = "I'm not sure what you are making. Please try again.";
    }

    callback(session.attributes,
         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function setGroupName(intent, session, callback) {
    const cardTitle = intent.name;
    const groupNameSlot = intent.slots.GroupName;
    let repromptText = '';
    let sessionAttributes = {};
    const shouldEndSession = false;
    let speechOutput = '';
    
    if (groupNameSlot) {
        const groupName = groupNameSlot.value;
        session.attributes.groupName = groupName;
        speechOutput = "Awesome! Let me check their allergies.";
    } else {
        speechOutput = "I didn't catch that. Please try again.";
        repromptText = "I'm not sure who's attending. Friends or Family?";
    }

    getAllergiesIntent(intent, session, callback);
    // callback(sessionAttributes,
        //  buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function getAllergiesIntent(intent, session, callback) {
    var groupName;
    var recipe;
    const repromptText = null;
    const sessionAttributes = {};
    let shouldEndSession = false;
    let speechOutput = '';
    
    if(session.attributes) {
        groupName = session.attributes.groupName;
        recipe = session.attributes.recipe;
        groupName = groupName.substring(0,1).toUpperCase() + groupName.substring(1);
    }
    
    findAllergies(groupName, recipe, function(allergicPeople) {
        if (allergicPeople) {
            var allergicPeopleString = allergicPeople.join(", ");
            speechOutput = `You invited ${groupName}. The following guests are allergic to something in your recipe. ${allergicPeopleString}. Valar morghulis.`;
        } else {
            speechOutput = `You invited ${groupName}. There are no allergic guests. Enjoy.`;
        }
    
        shouldEndSession = true;
        // Setting repromptText to null signifies that we do not want to reprompt the user.
        // If the user does not respond or says something that is not understood, the session
        // will end.
        callback(sessionAttributes,
             buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));
    });


}

function findAllergies(groupName,recipe,callback) {
    var allergyList;
    getAllergies(recipe,function(data) {
	allergyList=data;
	getPeopleInGroup(groupName, function(err,data) {
	    callback(getPeopleInGroupCallback(err,data,allergyList));
	});
    });
}

function getPeopleInGroupCallback(err,data,allergyList) {
    if(err) {
	console.error("FAILED"+err);
	return;
    }
    var peopleWithAllergies=[];
    data.Items.forEach(function (person) {
	var flag=false;
	var allergens=person.Allergens.values;
	for(var i=0;i<allergens.length;i++) {
	    var allergen=allergens[i];
	    for(var j=0;j<allergyList.length;j++) {
		var allergy=allergyList[j];
		if(allergen==allergy) {
		    peopleWithAllergies.push(person.Name);
		    flag=true;
		    break;
		}
	    }
	    if (flag)
		break;			
	}
    });

    return peopleWithAllergies;
}

function getAllergies(query, callback) {
  https.get('https://api.edamam.com/search?app_id=db157fce&app_key=4d0a7088ab759fa8f4f7f1b1503cb98a&from=0&to=1&q=' + encodeURIComponent(query), (res) => {
    var data = [
    ];
    res.on('data', function (chunk) {
      data.push(chunk);
    });
    res.on('end', function () {
      callback(process(data.join('')));
    });
  }).on('error', (e) => {
    console.error(e);
    callback(null);
  });
}
function getHealthLabels(jsonObj) {
  return jsonObj.hits[0].recipe.healthLabels;
}
function extractAllergies(healthLabels) {
  var allergies = {
    'gluten-free': 'Gluten',
    'dairy-free': 'Dairy',
    'egg-free': 'Eggs',
    'soy-free': 'Soy',
    'wheat-free': 'Wheat',
    'fish-free': 'Fish',
    'shellfish-free': 'Shellfish',
    'tree-nut-free': 'Tree Nuts',
    'peanut-free': 'Peanuts'
  };

  var res = [
  ];
  for (var typeOfAllergy in allergies) {
    var allergyFree = false;
    for (var index in healthLabels) {
      if (healthLabels[index].toLowerCase() == typeOfAllergy) {
        allergyFree = true;
        break;
      }
    }
    if (!allergyFree) {
      res.push(allergies[typeOfAllergy]);
    }
  }
  return res;
}
function process(jsonString) {
  try {
    var jsonObj = JSON.parse(jsonString);
    var healthLabels = getHealthLabels(jsonObj);
    return extractAllergies(healthLabels);
  } catch (e) {
    console.error(e);
    return null;
  }
}
function print(label, data) {
  console.log(label, data);
}

function showResponse(data) {
  console.log('Response:', data);
}

function getItem(primaryKey,callback) {
    var params= {
	TableName: table,
	Key:{
	    "Name":primaryKey
	}
    };
    var docClient= new AWS.DynamoDB.DocumentClient();

    docClient.get(params,callback);
}
    
function writeItem(item,callback) {
    var docClient=new AWS.DynamoDB.DocumentClient();
    var params={
	TableName: table,
	Item: {
	    "Name":item.Name,
	    "Groups":docClient.createSet(item.Groups),
	    "Allergens":docClient.createSet(item.Allergens)
	}
    }



    docClient.put(params,callback);
}

function getPeopleInGroup(groupName,callback) {
    var params={
	TableName: table,
	FilterExpression: "contains(Groups,:group)",
	ExpressionAttributeValues: {
	    ":group":groupName
	}
    };
    var docClient=new AWS.DynamoDB.DocumentClient();
    docClient.scan(params,callback);
}

// --------------- Events -----------------------

/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session) {
    console.log(`onSessionStarted requestId=${sessionStartedRequest.requestId}, sessionId=${session.sessionId}`);
}

/**
 * Called when the user launches the skill without specifying what they want.
 */
function onLaunch(launchRequest, session, callback) {
    console.log(`onLaunch requestId=${launchRequest.requestId}, sessionId=${session.sessionId}`);

    // Dispatch to your skill's launch.
    getWelcomeResponse(callback);
}

/**
 * Called when the user specifies an intent for this skill.
 */
function onIntent(intentRequest, session, callback) {
    console.log(`onIntent requestId=${intentRequest.requestId}, sessionId=${session.sessionId}`);

    const intent = intentRequest.intent;
    const intentName = intentRequest.intent.name;

    // Dispatch to your skill's intent handlers
    if (intentName === 'MyColorIsIntent') {
        setColorInSession(intent, session, callback);
    } else if (intentName === 'WhatsMyColorIntent') {
        getColorFromSession(intent, session, callback);
    } else if (intentName === 'AddPersonIntent') {
        addPersonName(intent, session, callback);
    } else if (intentName === 'GetPersonIntent') {
        getPersonName(intent, session, callback);
    } else if (intentName === "AllergenCheckIntent") {
        invokeAllergyCheck(intent, session, callback);
    } else if (intentName === "InvokeAllergyCheckIntent") {
        invokeAllergyCheck(intent, session, callback);
    } else if (intentName === "SetRecipeIntent") {
        setRecipe(intent, session, callback);
    } else if (intentName === "SetGroupNameIntent") {
        setGroupName(intent, session, callback);
    } else if (intentName === "GetAllergiesIntent") {
        getAllergiesIntent(intent, session, callback);
    } else if (intentName === 'AMAZON.HelpIntent') {
        getWelcomeResponse(callback);
    } else if (intentName === 'AMAZON.StopIntent' || intentName === 'AMAZON.CancelIntent') {
        handleSessionEndRequest(callback);
    } else {
        throw new Error('Invalid intent');
    }
}

/**
 * Called when the user ends the session.
 * Is not called when the skill returns shouldEndSession=true.
 */
function onSessionEnded(sessionEndedRequest, session) {
    console.log(`onSessionEnded requestId=${sessionEndedRequest.requestId}, sessionId=${session.sessionId}`);
    // Add cleanup logic here
}


// --------------- Main handler -----------------------

// Route the incoming request based on type (LaunchRequest, IntentRequest,
// etc.) The JSON body of the request is provided in the event parameter.
exports.handler = (event, context, callback) => {
    try {
        console.log(`event.session.application.applicationId=${event.session.application.applicationId}`);

        /**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */
        /*
        if (event.session.application.applicationId !== 'amzn1.echo-sdk-ams.app.[unique-value-here]') {
             callback('Invalid Application ID');
        }
        */

        if (event.session.new) {
            onSessionStarted({ requestId: event.request.requestId }, event.session);
        }

        if (event.request.type === 'LaunchRequest') {
            onLaunch(event.request,
                event.session,
                (sessionAttributes, speechletResponse) => {
                    callback(null, buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === 'IntentRequest') {
            onIntent(event.request,
                event.session,
                (sessionAttributes, speechletResponse) => {
                    callback(null, buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === 'SessionEndedRequest') {
            onSessionEnded(event.request, event.session);
            callback();
        }
    } catch (err) {
        callback(err);
    }
};
